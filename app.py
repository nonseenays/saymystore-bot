import telebot
import random
import requests

TOKEN = '8203843422:AAF24yiyOCRwJD7xDCifH6cGC42RIcrgnyE'  
response = requests.get(f'https://api.telegram.org/bot{TOKEN}/deleteWebhook')
print(response.json())# <<< –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù
bot = telebot.TeleBot(TOKEN)

USDT_RATE = 90
usdt_address = "TLXpo31Ws8PzAXHNBX3CYXuu5FEXoabptJ"
admin_chat_id = 6779729167  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

user_orders = {}
payment_status = {}

prices_rub = {
    "MDMA 1–ì": 3090,
    "AMF 1–ì": 2990,
    "MEPHEDRONE 1–ì": 2490,
    "MEPHEDRONE 2–ì": 4550,
    "EXTAZI 2–®–¢": 2590,
    "EXTAZI 3–®–¢": 3550,
    "–†–û–°–° (–°–ü–ê–ô–°) 2–ì": 2490,
    "–†–û–°–° (–°–ü–ê–ô–°) 3–ì": 3490,
    "LSD (170MKG) 2–®–¢": 3490,
    "MED 0.5 –ì": 3490,
    "MED 1 –ì": 6490,
    "–ì–ê–® DIAMOND HAZE 1–ì": 2490,
    "–ì–ê–® DIAMOND HAZE 2–ì": 4590,
    "–ì–ê–® –ï–í–†–û 1–ì": 2990,
    "–ú–ê–†–ò–•–ê–£–ù–ù–ê/ 1–≥": 2590,
    "–ú–ê–†–ò–•–£–ê–ù–ù–ê/ 2–≥": 4520,
    "CK APVP 1–≥": 2540,
    "–õ–ò–†–ò–ö–ê ( Pfizer 300 mg ) - 28 —à—Ç": 3540,
    "–õ–ò–†–ò–ö–ê ( Prizer 300 mg ) - 56 —à—Ç": 6550,
    "–ü–†–ï–ì–ê–ë–ê–õ–ò–ù ( Rixter 300 mg ) - 28 —à—Ç": 3520,
    "–ü–†–ï–ì–ê–ë–ê–õ–ò–ù ( Rixter 300 mg ) - 56 —à—Ç": 6490,
    "–ì–ê–® –ï–í–†–û - 2–≥": 5490,
    "–ì–µ—Ä.WHITE - 1–≥": 3490,
    "–®–∏—à–∫–∏ Og kush - 1–≥": 2490,
    "–®–∏—à–∫–∏ 0g kush - 2–≥": 4590,
    "KOKAIN (BOLIVIA) - 0.5–≥": 5090,
    "KOKAIN (BOLIVIA) - 1–≥": 10100,
    "–ú–ï–§–ï–î–†–û–ù ( –ö—Ä–∏—Å—Ç–∞–ª–ª—ã ) - 0.5 –≥": 2590,
    "–ú–ï–§–ï–î–†–û–ù ( –ö—Ä–∏—Å—Ç–∞–ª–ª—ã ) - 1–≥": 4490,
    "–ê–ù–ê–®–ê - 1–≥": 2590,
    "–ê–ù–ê–®–ê - 2–≥": 4490,
}

cities = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–°–∞—Ä–∞—Ç–æ–≤", "–¢—é–º–µ–Ω—å", "–¢–æ–ª—å—è—Ç—Ç–∏", "–ò–∂–µ–≤—Å–∫",
    "–ë–∞—Ä–Ω–∞—É–ª", "–£–ª—å—è–Ω–æ–≤—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–¢–æ–º—Å–∫", "–û—Ä–µ–Ω–±—É—Ä–≥", "–ö–µ–º–µ—Ä–æ–≤–æ"
]

def chunk_list(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

PRODUCTS_PER_PAGE = 7

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üê≤ –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó üê≤")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SayMyStore. üíõ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üê≤ –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó üê≤")
def choose_city(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for city_chunk in chunk_list(cities, 3):
        markup.add(*city_chunk)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in cities)
def choose_product(message):
    chat_id = message.chat.id
    user_orders.setdefault(chat_id, {})
    user_orders[chat_id]['city'] = message.text
    user_orders[chat_id]['page'] = 0
    send_products_page(chat_id, 0)

def send_products_page(chat_id, page):
    products = list(prices_rub.keys())
    max_page = (len(products) - 1) // PRODUCTS_PER_PAGE

    if page < 0 or page > max_page:
        return

    user_orders[chat_id]['page'] = page
    start_idx = page * PRODUCTS_PER_PAGE
    end_idx = start_idx + PRODUCTS_PER_PAGE
    products_page = products[start_idx:end_idx]

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*products_page)

    nav_buttons = []
    if page > 0:
        nav_buttons.append("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    if page < max_page:
        nav_buttons.append("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    if nav_buttons:
        markup.add(*nav_buttons)

    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {max_page + 1}):", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
def navigate_products(message):
    chat_id = message.chat.id
    page = user_orders.get(chat_id, {}).get('page', 0)
    if message.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        page -= 1
    elif message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        page += 1
    send_products_page(chat_id, page)

@bot.message_handler(func=lambda m: m.text in prices_rub)
def product_choice(message):
    chat_id = message.chat.id
    if chat_id not in user_orders:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
        return

    user_orders[chat_id]['product'] = message.text
    user_orders[chat_id]['delivery_method'] = None
    user_orders[chat_id]['order_number'] = random.randint(1000, 9999)

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ú–∞–≥–Ω–∏—Ç", "–ü—Ä–∏–∫–æ–ø", "–¢–∞–π–Ω–∏–∫")
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–ú–∞–≥–Ω–∏—Ç", "–ü—Ä–∏–∫–æ–ø", "–¢–∞–π–Ω–∏–∫"])
def choose_delivery(message):
    chat_id = message.chat.id
    if chat_id not in user_orders or 'product' not in user_orders[chat_id]:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.")
        return

    user_orders[chat_id]['delivery_method'] = message.text
    product = user_orders[chat_id]['product']
    price_rub = prices_rub[product]
    price_usdt = round(price_rub / USDT_RATE, 2)
    order_number = user_orders[chat_id]['order_number']

    pay_text = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {product}\n"
        f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {message.text}\n"
        f"–°—É–º–º–∞: {price_rub} ‚ÇΩ\n"
        f"–û–ø–ª–∞—Ç–∞ –≤ USDT (TRC20): {price_usdt} USDT\n\n"
        f"–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{usdt_address}\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
    )

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            text="–Ø –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä",
            callback_data=f"paid_{order_number}"
        )
    )

    bot.send_message(chat_id, pay_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("paid_"))
def callback_paid(call):
    chat_id = call.message.chat.id
    order_number = call.data.split("_")[1]

    if chat_id not in user_orders or user_orders[chat_id].get('order_number') != int(order_number):
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    bot.send_message(chat_id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.")
    bot.answer_callback_query(call.id)

@bot.message_handler(content_types=['photo'])
def handle_payment_screenshot(message):
    chat_id = message.chat.id
    if chat_id not in user_orders or 'product' not in user_orders[chat_id]:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    if payment_status.get(chat_id) == 'pending':
        bot.send_message(chat_id, "–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    payment_status[chat_id] = 'pending'
    bot.send_message(chat_id, "–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling...")
bot.polling(none_stop=True)
